@page "/image-file"
@inject IJSRuntime JSRuntime

<div>
    <input type="radio" name="format" value="grayscale" @onchange="HandleInputChange">Grayscale
    <input type="radio" name="format" value="color" checked @onchange="HandleInputChange">Color
    <input type="radio" name="format" value="binary" @onchange="HandleInputChange">Binary
</div>

<div>
<button class="btn" @onclick="DocDetect">Load file</button>
<button class="btn" @onclick="Rectify">Rectify</button>
</div>


<div class="container">
    <div>
        <div id="imageview">
            <img id="image" />
            <canvas id="overlay"></canvas>
        </div>
    </div>
    <div>
        <canvas id="canvas"></canvas>
    </div>
</div>

@code {
    private MarkupString result = new MarkupString("");
    private DotNetObjectReference<ImageFile>? objRef;
    private string? inputValue;

    public async Task HandleInputChange(ChangeEventArgs e)
    {
        if (e == null || e.Value == null) return;
        inputValue = e.Value.ToString();

        await JSRuntime.InvokeVoidAsync(
        "jsFunctions.updateSetting", inputValue);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeAsync<Boolean>("jsFunctions.initReader", objRef, "canvas");
        }
    }

    public async Task DocDetect()
    {
        await JSRuntime.InvokeVoidAsync(
        "jsFunctions.selectFile", objRef, "overlay", "image");
    }

    public async Task Rectify()
    {
        await JSRuntime.InvokeVoidAsync(
        "jsFunctions.rectify");
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}

